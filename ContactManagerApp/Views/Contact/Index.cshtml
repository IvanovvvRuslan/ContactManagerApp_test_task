@model IEnumerable<ContactManagerApp.DTO.ContactDto>

@{
    ViewData["Title"] = "Contacts";
}

<h1>Contacts</h1>

<input type="text" id="searchBox" placeholder="Search..." class="form-control mb-3" />

<table id="contactsTable" class="table table-bordered table-striped">
    <thead>
        <tr>
            <th onclick="sortTable(0)">Name</th>
            <th onclick="sortTable(1)">Birth Date</th>
            <th onclick="sortTable(2)">Married</th>
            <th onclick="sortTable(3)">Phone</th>
            <th onclick="sortTable(4)">Salary</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var contact in Model)
    {
        <tr>
            <td contenteditable="true" 
                onblur="updateField(@contact.Id, 'Name', this.innerText)">
                @contact.Name
            </td>
            <td>@contact.BirthDate.ToShortDateString()</td>
            <td contenteditable="true" 
                onblur="updateField(@contact.Id, 'IsMarried', this.innerText)">
                @(contact.IsMarried ? "Yes" : "No")
            </td>
            <td contenteditable="true" 
                onblur="updateField(@contact.Id, 'PhoneNumber', this.innerText)">
                @contact.PhoneNumber
            </td>
            <td contenteditable="true" 
                onblur="updateField(@contact.Id, 'Salary', this.innerText)">
                @contact.Salary
            </td>
            <td>
                <button class="btn btn-danger btn-sm" onclick="deleteContact(@contact.Id)">
                    Delete
                </button>
            </td>
        </tr>
    }
    </tbody>
    @Html.AntiForgeryToken()
</table>

<div style="margin-top:10px;">
    <a asp-action="Create" class="btn btn-primary">Create New Contact</a>
    <a asp-action="Upload" class="btn btn-secondary">Upload CSV</a>
    <a asp-action="Paginated" class="btn btn-link">View Paginated</a>
</div>

@section Scripts {
<script>
function getAntiForgeryToken() {
    const el = document.querySelector('input[name="__RequestVerificationToken"]');
    return el ? el.value : '';
}
// 🔍 фильтрация
document.getElementById("searchBox").addEventListener("keyup", function() {
    let filter = this.value.toLowerCase();
    let rows = document.querySelectorAll("#contactsTable tbody tr");

    rows.forEach(row => {
        let text = row.innerText.toLowerCase();
        row.style.display = text.includes(filter) ? "" : "none";
    });
});

// ⬆⬇ сортировка по колонкам
function sortTable(colIndex) {
    let table = document.getElementById("contactsTable");
    let rows = Array.from(table.rows).slice(1); // исключаем заголовок
    let asc = table.getAttribute("data-sort") !== "asc";

    rows.sort((a, b) => {
        let A = a.cells[colIndex].innerText.trim();
        let B = b.cells[colIndex].innerText.trim();

        // если число — сравниваем как число
        if (!isNaN(A) && !isNaN(B)) {
            return asc ? A - B : B - A;
        }
        return asc ? A.localeCompare(B) : B.localeCompare(A);
    });

    rows.forEach(r => table.tBodies[0].appendChild(r));
    table.setAttribute("data-sort", asc ? "asc" : "desc");
}

// ✏️ обновление записи (AJAX)
function updateField(id, fieldName, fieldValue) {
    fetch('/Contact/UpdateField', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: `id=${id}&fieldName=${encodeURIComponent(fieldName)}&fieldValue=${encodeURIComponent(fieldValue)}`
    }).then(res => {
        if (!res.ok) alert("Error updating field!");
    });
}

// ❌ удаление записи (AJAX)
function deleteContact(id) {
    if (!confirm("Are you sure you want to delete this contact?")) return;
    fetch(`/Contact/Delete/${id}`, {
        method: 'POST',
        headers: { 'RequestVerificationToken': getAntiForgeryToken() }
    }).then(res => {
        if (res.ok) location.reload();
        else alert("Error deleting contact");
    });
}
</script>
}
