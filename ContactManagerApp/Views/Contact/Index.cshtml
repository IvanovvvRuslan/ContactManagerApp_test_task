@using System.Globalization
@model IEnumerable<ContactManagerApp.DTO.ContactDto>

@{
    ViewData["Title"] = "Contacts";
}

<h1>Contacts</h1>

<input type="text" id="searchBox" placeholder="Search..." class="form-control mb-3" />

<table id="contactsTable" class="table table-bordered table-striped">
    <thead>
        <tr>
            <th onclick="sortTable(0)">Name</th>
            <th onclick="sortTable(1)">Birth Date</th>
            <th onclick="sortTable(2)">Married</th>
            <th onclick="sortTable(3)">Phone</th>
            <th onclick="sortTable(4)">Salary</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var contact in Model)
    {
        <tr>
            <td>
                <input type="text" value="@contact.Name" 
                       onchange="updateField(@contact.Id, 'Name', this.value)" />
            </td>
            <td>
                <input type="date" value="@contact.BirthDate.ToString("yyyy-MM-dd")"
                       onchange="updateField(@contact.Id, 'BirthDate', this.value)" />
            </td>
            <td>
                <input type="checkbox" @(contact.IsMarried ? "checked" : "") 
                       onchange="updateField(@contact.Id, 'IsMarried', this.checked)" />
            </td>
            <td>
                <input type="text" value="@contact.PhoneNumber" 
                       onchange="updateField(@contact.Id, 'PhoneNumber', this.value)" />
            </td>
            <td>
            <input type="text" value="@contact.Salary.ToString(CultureInfo.InvariantCulture)" 
                   onchange="formatSalaryInput(this); updateField(@contact.Id, 'Salary', this.value)"
                   style="width:80px; text-align:right;" />
            </td>
            <td>
                <button class="btn btn-danger btn-sm" onclick="deleteContact(@contact.Id)">
                    Delete
                </button>
            </td>
        </tr>
    }
    </tbody>
    @Html.AntiForgeryToken()
</table>

<div style="margin-top:10px;">
    <a asp-action="Create" class="btn btn-primary">Create New Contact</a>
    <a asp-action="Upload" class="btn btn-secondary">Upload CSV</a>
    <a asp-action="Paginated" class="btn btn-link">View Paginated</a>
</div>

@section Scripts {
<script>
    
function getAntiForgeryToken() {
    const el = document.querySelector('input[name="__RequestVerificationToken"]');
    return el ? el.value : '';
}

document.getElementById("searchBox").addEventListener("keyup", function() {
    let filter = this.value.toLowerCase();
    let rows = document.querySelectorAll("#contactsTable tbody tr");

    rows.forEach(row => {
        let cells = Array.from(row.cells);
        let match = cells.some(cell => {
            let input = cell.querySelector("input");
            let value = "";
            if (input) {
                if (input.type === "checkbox") value = input.checked ? "true" : "false";
                else value = input.value.trim();
            } else {
                value = cell.innerText.trim();
            }
            return value.toLowerCase().includes(filter);
        });

        row.style.display = match ? "" : "none";
    });
});

function formatSalaryInput(input) {
    let value = input.value.trim();

    if (value === "") return;

    let num = parseFloat(value.replace(',', '.'));
    if (!isNaN(num)) {
        input.value = num.toFixed(2);
    }
}

function sortTable(colIndex) {
    let table = document.getElementById("contactsTable");
    let rows = Array.from(table.rows).slice(1);
    let asc = table.getAttribute("data-sort") !== "asc";

    rows.sort((a, b) => {
        let getCellValue = (cell) => {
            let input = cell.querySelector("input");
            if (input) {
                if (input.type === "checkbox") return input.checked ? "1" : "0";
                return input.value.trim();
            }
            return cell.innerText.trim();
        };

        let A = getCellValue(a.cells[colIndex]);
        let B = getCellValue(b.cells[colIndex]);

        let numA = parseFloat(A.replace(',', '.'));
        let numB = parseFloat(B.replace(',', '.'));
        if (!isNaN(numA) && !isNaN(numB)) {
            return asc ? numA - numB : numB - numA;
        }

        return asc ? A.localeCompare(B) : B.localeCompare(A);
    });

    rows.forEach(r => table.tBodies[0].appendChild(r));
    table.setAttribute("data-sort", asc ? "asc" : "desc");
}


function updateField(id, fieldName, fieldValue) {
    fetch('/Contact/UpdateField', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': getAntiForgeryToken()
        },
        body: `id=${id}&fieldName=${encodeURIComponent(fieldName)}&fieldValue=${encodeURIComponent(fieldValue)}`
    })
        .then(res => res.json())
        .then(data => {
            if (!data.success) {
                alert("Validation error: " + data.message);
            }
        })
        .catch(() => alert("Unexpected error while updating!"));
}

function deleteContact(id) {
    if (!confirm("Are you sure you want to delete this contact?")) return;
    fetch(`/Contact/Delete/${id}`, {
        method: 'POST',
        headers: { 'RequestVerificationToken': getAntiForgeryToken() }
    }).then(res => {
        if (res.ok) location.reload();
        else alert("Error deleting contact");
    });
}
</script>
}
